#!/usr/bin/env bash

# apt-cyg: install tool for cygwin similar to debian apt-get

# The MIT License (MIT)
# 
# Copyright (c) 2016 Eftakhar Chowdhury Pallab
#

cyg_pall=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)/$(basename $0)
cyg_pall_dir=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)

# this script requires some packages

type aria2c tar gawk &> /dev/null || {
  echo You must install aria2, tar and gawk to use cyg-pall.
  exit 1
}

function usage()
{
  echo cyg-pall: Installs and removes Cygwin packages.
  echo "  \"cyg-pall install <package names>\" to install packages"
  echo "  \"cyg-pall resume-install\" to resume interrupted installing"
  echo "  \"cyg-pall remove <package names>\" to remove packages"
  echo "  \"cyg-pall update\" to update setup.ini"
  echo "  \"cyg-pall show\" to show installed packages"
  echo "  \"cyg-pall find <patterns>\" to find packages matching patterns"
  echo "  \"cyg-pall describe <patterns>\" to describe packages matching patterns"
  echo "  \"cyg-pall packageof <commands or files>\" to locate parent packages"
  echo "  \"cyg-pall pathof <cache|mirror|mirrordir|cache/mirrordir|setup.ini>\""
  echo "                                                          to show path"
  echo "  \"cyg-pall upgrade-self\" to upgrade cyg-pall"
  echo "Options:"
  echo "  --charch <arch>          : change archetecture"
  echo "  --use-setuprc            : set cache and mirror with /etc/setup/setup.rc"
  echo "  --ignore-case, -i        : ignore case distinctions for <patterns>"
  echo "  --no-file-alloc, -n      : doesn't allocate file space before downloading"
  echo "  --force                  : force install/remove/fetch trustedkeys"
  echo "  --mirror, -m <url>       : set mirror"
  echo "  --cache, -c <dir>        : set cache"
  echo "  --file, -f <file>        : read package names from file"
  echo "  --max-connections <num>  : maximum number of connections"
  echo "  --yes-to-all, -y         : force yes on ask prompts"
  echo "  --help"
  echo "  --version"
}

function version()
{
  echo "cyg-pall version 0.57"
  echo "Written by Eftakhar Chowdhury Pallab"
  echo ""
  echo "Copyright (c) 2016-9 Eftakhar Chowdhury Pallab.  Released under the NKSoft INC."
}

function warning()
{
  echo -e "\e[1;33mWarning:\e[30;0m $1"
}

function error()
{
  echo -e "\e[1;31mError:\e[30;0m $1" 1>&2
}


function current_cygarch ()
{
  arch | sed -e 's/^i686$/x86/g'
}

function mirror_to_mirrordir ()
{
  echo "$1" | sed -e "s/:/%3a/g" -e "s:/:%2f:g"
}

function findworkspace()
{
  # default working directory, mirror and architecture

  mirror=ftp://mirror.mcs.anl.gov/pub/cygwin
  arch="$(current_cygarch)"
  cache=/setup
  
  # work wherever setup worked last, if possible
  
  if [ -e /etc/setup/last-cache ]; then
    cache="$(cygpath -au "$(head -1 /etc/setup/last-cache)")"
  fi
  cache="${cache%/}"
  
  if [ -e /etc/setup/last-mirror ]; then
    mirror="$(head -1 /etc/setup/last-mirror)"
  fi
  mirror="${mirror%/}"
  mirrordir="$(mirror_to_mirrordir "$mirror/")"

  echo Working directory is $cache
  echo Mirror is $mirror
  
  mkdir -p "$cache/$mirrordir/$arch"
  cd "$cache/$mirrordir/$arch"
}

function download ()
{
  "${ARIA2C[@]}" "$1" || return 1
  [ -e "${1##*/}" ] || return 1
  return
}

function files_backup ()
{
  locale file
  for file; do
    [ -e "${file}~" ] && mv    "${file}~" "${file}"
    [ -e "${file}"  ] && cp -a "${file}"  "${file}~"
  done
}

function files_restore ()
{
  locale file
  for file; do
    [ -e "${file}"  ] && rm    "${file}"
    [ -e "${file}~" ] && mv    "${file}~" "${file}"
  done
}

function files_backup_clean ()
{
  locale file
  for file; do
    [ -e "${file}~" ] && rm    "${file}~"
  done
}

function setupini_download ()
{
  local BASEDIR="$cache/$mirrordir/$arch"
  mkdir -p "$BASEDIR" || { echo -e "\e[31;1mError:\e[30;0m mkdir \"$BASEDIR\" failed."; exit 1; }
  
  ( ((noupdate)) && [ -f $cache/$mirrordir/$arch/setup.ini ] ) && return
  
  pushd "$BASEDIR"
  files_backup setup.ini setup.ini.sig setup.bz2 setup.bz2.sig
  
  while true; do
    download "$mirror/$arch/setup.bz2" && { bunzip2 -k setup.bz2 && mv setup setup.ini || rm -f setup.bz2; }
    download "$mirror/$arch/setup.ini" || break
    
    files_backup_clean setup.ini setup.ini.sig setup.bz2 setup.bz2.sig
    popd
    echo "Updated setup.ini"
    noupdate=1
    return
  done
  files_restore setup.ini setup.ini.sig setup.bz2 setup.bz2.sig
  popd
  error "updating setup.ini, reverting."
  return 1
}

function getsetup ()
{
  setupini_download || return 1
}

function checkpackages()
{
  if [ $# -eq 0 ]; then
    echo Nothing to do, exiting
    exit 0
  fi
}

# Usage: getrootdir arch
function getrootdir ()
{
  case "$1" in
    x86)
      cygpath -u "$(< /proc/registry32/HKEY_LOCAL_MACHINE/SOFTWARE/Cygwin/setup/rootdir)" ;;
    x86_64)
      cygpath -u "$(< /proc/registry64/HKEY_LOCAL_MACHINE/SOFTWARE/Cygwin/setup/rootdir)" ;;
    *)
      error "unknown arch $1" ;;
  esac
}

# Usage: charch arch cyg-pall_parms ...
function charch ()
{
  local rootdir
  if [ "$(current_cygarch)" != "$1" ]; then
    echo -e "\e[32;1mcharch to:\e[30;0m $1"
    rootdir="$(getrootdir "$1")"
    shift
    chroot "$rootdir" "$rootdir/bin/bash" -lc \
      'cd "$1"; shift ; "$0" "$@"' \
      "$(which "$0" | xargs cygpath -aml | xargs cygpath -u)" \
      "$(pwd        | xargs cygpath -aml | xargs cygpath -u)" \
      "$@"
    exit $?
  fi
}

# Usage: ask_user "question?" (optional recognition of YES_TO_ALL=true auto yes)
function ask_user ()
{
  while true; do
    [ -n "$2" ] && { local pmt="$2"; local def=; }
    [ -n "$2" ] || { local pmt="y/n";local def=; }
    [ $YES_TO_ALL = 1 ] && { local RPY=Y;local def=Y; }
    [ -z "$def" ] && { echo -ne "$1 ";read -p "[$pmt] " RPY; }
    [ -z "$RPY" ] && { local RPY=$def; }
    case "$RPY" in
      Y*|y*) return 0 ;;
      N*|n*) return 1 ;;
         1*) return 0 ;;
         2*) return 1 ;;
    esac
  done
}

function cyg-pall-pathof ()
{
  findworkspace >& /dev/null
  while [ "$#" -gt 0 ]; do
    case "$1" in
      cache)            echo "$cache" ;;
      mirror)           echo "$mirror" ;;
      mirrordir)        echo "$mirrordir" ;;
      cache/mirrordir)  echo "$cache/$mirrordir" ;;
      setup.ini)        echo "$cache/$mirrordir/$arch/setup.ini" ;;
      *)
        error "in function $FUNCNAME: unknown parameter: $1"
        exit 1
    esac
    shift
  done
}

function cyg-pall-upgrade-self ()
{
    if [ -d $cyg_pall_dir/.git ]; then
        git pull -v
    else
        mv $cyg_pall $cyg_pall_dir/cyg-pall.bak
        aria2c "https://raw.githubusercontent.com/lambdalice/cyg-pall/master/cyg-pall" --dir $cyg_pall_dir ||
        {
            error "while updating setup.ini"
            exit 1
        }
    fi
    chmod 775 $cyg_pall
    echo "Updated cyg-pall"
}


function cyg-pall-help ()
{
  usage
}

# process options

noupdate=0
OPT_FILES=()
SUBCOMMAND=""
ignore_case=""
force=""
YES_TO_ALL=false
file_alloc=1
maxcount=5
INITIAL_ARGS=( "$@" )
ARGS=()
while [ $# -gt 0 ]; do
  case "$1" in

    --charch)
      charch "$2" "${INITIAL_ARGS[@]}"
      shift ; shift
    ;;

    --use-setuprc)
      "$0" -c "$(grep -A1 last-cache  /etc/setup/setup.rc | tail -n1 | sed -r 's/^\s*|\s*$//g')" > /dev/null
      "$0" -m "$(grep -A1 last-mirror /etc/setup/setup.rc | tail -n1 | sed -r 's/^\s*|\s*$//g')" > /dev/null
      shift
    ;;

    --max-connections)
      maxcount=$2
      shift; shift
    ;;

    --ignore-case|-i)
      ignore_case="$1"
      shift
    ;;

    --force)
      force=1
      shift
    ;;

    --rapid|-r)
      warning "--rapid is obsolete, don't works"
      shift
    ;;

    --mirror|-m)
      echo "${2%/}/" > /etc/setup/last-mirror
      shift ; shift
    ;;

    --cache|-c)
      cygpath -aw "$2" > /etc/setup/last-cache
      shift ; shift
    ;;

    --noupdate|-u)
      warning "--noupdate is obsolete, don't works"
      shift
    ;;

    --no-file-alloc|-n)
      file_alloc=0
      shift
    ;;

    --yes-to-all|-y)
      YES_TO_ALL=1
      shift
    ;;

    --help)
      usage
      exit 0
    ;;

    --version)
      version
      exit 0
    ;;

    --file|-f)
      if [ -n "$2" ]; then
        OPT_FILES+=( "$2" )
        shift
      else
        echo 1>&2 No file name provided, ignoring $1
      fi
      shift
    ;;

    *)
      if [ -z "$SUBCOMMAND" ]; then
        SUBCOMMAND="$1"
      else
        ARGS+=( "$1" )
      fi
      shift

    ;;

  esac
done

for file in "${OPT_FILES[@]}"; do
  if [ -f "$file" ]; then
    readarray -t -O ${#ARGS[@]} ARGS < "$file"
  else
    warning "File $file not found, skipping"
  fi
done

# aria2 setup

if [ `current_cygarch` = "x86" ]; then
  warning "x86 env detected: aria2 can't use --conditional-get, always download and overwrite"
  ARIA2C=( "aria2c" "--allow-overwrite=true" )
else
  ARIA2C=( "aria2c" "--conditional-get" "--allow-overwrite" )
fi

if [ $file_alloc = 0 ]; then
  ARIA2C=( ${ARIA2C[@]} "--file-allocation=none" )
fi



function cyg-pall-update ()
{

    findworkspace
    getsetup

}


function cyg-pall-show ()
{

    echo 1>&2 The following packages are installed:
    awk '/[^ ]+ [^ ]+ 0/ {print $1}' /etc/setup/installed.db

}


function cyg-pall-find ()
{
    local pkg

    checkpackages "$@"
    findworkspace
    getsetup

    for pkg do
      echo ""
      echo "Searching for installed packages matching $pkg:"
      awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query="$pkg" IGNORECASE="$ignore_case" /etc/setup/installed.db
      echo ""
      echo "Searching for installable packages matching $pkg:"
      awk -v query="$pkg" -v IGNORECASE="$ignore_case" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $1}}' \
        setup.ini
    done

}


function cyg-pall-describe ()
{
    local pkg

    checkpackages "$@"
    findworkspace
    getsetup
    for pkg do
      echo ""
      awk -v query="$pkg" -v IGNORECASE="$ignore_case" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $0 "\n"}}' \
        setup.ini
    done

}


function cyg-pall-packageof ()
{
    local pkg
    local manifest

    checkpackages "$@"
    for pkg do
      local key="$(which "$pkg" 2>/dev/null | sed "s:^/::")"
      if [ -z "$key" ]; then
        key="$pkg"
      fi
      for manifest in /etc/setup/*.lst.gz; do
        local found="$(gzip -cd "$manifest" | grep -c "$key")"
        if [ $found -gt 0 ]; then
          local package="$(echo $manifest | sed -e "s:/etc/setup/::" -e "s/.lst.gz//")"
          echo Found $key in the package $package
        fi
      done
    done

}

RESUME_INSTALL=1

function cyg-pall-install ()
{
    local pkg
    local script

    checkpackages "$@"
    findworkspace
    noupdate=1
    getsetup
    echo
    
    for pkg do
      local already="$(grep -c "^$pkg " /etc/setup/installed.db)"
      if [ $already -ge 1 ] && [ -z $force ]; then
        warning "Package $pkg is already installed, skipping"
        continue
      fi
      CURRENT="${CURRENT[@]} $pkg"
    done

    [ -f /tmp/cyg-pall-packages ] && {
      warning "Interrupted resolving deps detected, ignoring."
      rm /tmp/cyg-pall-*  
    }

    echo -n "Resolving dependencies.."
    
    resolve_deps
        
    RESUME_INSTALL=0
    cyg-pall-resume-install
}

function resolve_deps()
{
    while true ; do

    echo -n "."
    pkgs=${CURRENT[@]}
    CURRENT=""
    hasdeps=0

        
    for pkg in $pkgs; do

      [ -f /tmp/cyg-pall-packages ] && {
        local installing="$( grep -c "$pkg" /tmp/cyg-pall-packages)"
        [ $installing = 0 ] || continue
      }

      # look for package and save desc file
 
      mkdir -p "release/$pkg"
      awk > "release/$pkg/desc" -v package=`echo $pkg` \
        'BEGIN{RS="\n\n@ "; FS="\n"} {if ($1 == package) {desc = $0; px++}} \
        END {if (px == 1 && desc != "") print desc; else print "Package not found"}' \
        setup.ini
      local desc="$(< "release/$pkg/desc")"
      if [ "$desc" = "Package not found" ]; then
        echo; error "Package $pkg not found or ambiguous name, exiting"
        rm -r "release/$pkg"
        rm /tmp/cyg-pall-* 2> /dev/null
        exit 1
      fi
     
      # queue current package

      local install="$(awk '/^install: / { print $2; exit }' "release/$pkg/desc")"
      echo "$mirror/$install" >> /tmp/cyg-pall-downloads
      echo "  dir=release/$pkg" >> /tmp/cyg-pall-downloads
      echo $pkg >> /tmp/cyg-pall-packages
      hasdeps=1
      
      # resolve dependencies

      local requires="$(grep "^requires: " "release/$pkg/desc" | sed -re 's/^requires: *(.*[^ ]) */\1/g' -e 's/ +/ /g')"

      local warn=0
      
      if [ -n "$requires" ]; then
        for package in $requires; do
          local already="$(grep -c "$package " /etc/setup/installed.db)" 
          if [ $already = 0 ]; then
            CURRENT=( ${CURRENT[@]} $package )
          fi
        done
      fi

      if [ -z "$install" ]; then
        error "Could not find \"install\" in package description: obsolete package?"
        rm /tmp/cyg-pall-*
        exit 1
      fi
    done
    
    # tailcall

    [ $hasdeps = 0 ] && break;
    done
}

function cyg-pall-resume-install()
{
    echo; echo
    if [ ! -f "/tmp/cyg-pall-packages" ]; then
      echo "Nothing to install, exiting"
      exit 0
    fi
      
    echo "Following packages will be installed:"
    for p in $( cat /tmp/cyg-pall-packages ); do
      echo -n $p " "
    done
    echo; ask_user "Do you wish to continue?" || quit

    [ $RESUME_INSTALL = 0 ] || findworkspace
    
    # download all
    
    echo "Start downloading..."
    ${ARIA2C[@]} --input-file /tmp/cyg-pall-downloads \
                 `[ $(current_cygarch) = "x86" ] || echo "--deferred-input"` \
                 -j $maxcount || {
      echo -e "\e[1;34mInterrupted:\e[0m To resume installing, run \"cyg-pall resume-install\" ."
      exit 1
    }

    # unpack all

    for pkg in $( cat /tmp/cyg-pall-packages ); do
    
      install="$(awk '/^install: / { print $2; exit }' "release/$pkg/desc")"
      file="$(basename "$install")"
      cd "release/$pkg"
      
      # check the sha512

      while true; do
        local digest="$(awk '/^install: / { print $4; exit }' "desc")"
        local digactual="$(sha512sum $file | awk '{print $1}')"
        if [ "$digest" != "$digactual" ]; then
          error "SHA512 sum did not match, retry downloading..."
          aria2c $mirror/$install
        else break; fi
      done
      
      echo "Unpacking: $pkg"
      tar > "/etc/setup/$pkg.lst" xvf "$file" -C /
      gzip -f "/etc/setup/$pkg.lst"
      cd ../..
    
      # update the package database

      awk > /tmp/awk.$$ -v pkg="$pkg" -v bz=$file \
        '{if (ins != 1 && pkg < $1) {print pkg " " bz " 0"; ins=1}; print $0} \
        END{if (ins != 1) print pkg " " bz " 0"}' \
        /etc/setup/installed.db
      mv /etc/setup/installed.db /etc/setup/installed.db-save
      mv /tmp/awk.$$ /etc/setup/installed.db
    done
    
    # run all postinstall scripts
    
    local pis="$(ls /etc/postinstall/*.sh 2>/dev/null | wc -l)"
    if [ $pis -gt 0 ]; then
      echo Running postinstall scripts...
      for script in /etc/postinstall/*.sh; do
        $script
        mv $script $script.done
      done
    fi
    quit

}


function quit()
{
    echo "Removing tmp files..."
    rm /tmp/cyg-pall-*
    echo Done.
    exit
}

function cyg-pall-remove()
{
    local pkg
    local req
    valid=0

    findworkspace
    checkpackages "$@"

    echo

    CURRENT=""
    for pkg in $@; do
      if [ ! -e "/etc/setup/$pkg.lst.gz" -a -z "$force" ]; then
        echo Package manifest missing, cannot remove $pkg.
        continue
      fi
      valid=1
      CURRENT=( ${CURRENT[@]} $pkg )
    done

    [ $valid = 1 ] || exit -1
    remove-dep
}

function remove-dep()
{
    local pkg
    REMOVE=""
    do_remove=0

    echo -n Resolving dependencies...

    until [ -z $CURRENT ]; do

      echo -n .
      pkgs=${CURRENT[@]}
      CURRENT=""

      for p in $pkgs; do

        already="$(grep -c "^$p " /etc/setup/installed.db)"
        removing=`echo ${REMOVE[@]} | grep -c $p`
        ([ $already -gt 0 ] && [ $removing = 0 ]) || continue

        local dontremove="cygwin coreutils gawk bzip2 tar xz aria2 bash"
        for req in $dontremove; do
            if [ "$p" = "$req" ]; then
            echo; error "cyg-pall cannot remove package $p, exiting"
            exit 1
          fi
        done
      
        REMOVE=( ${REMOVE[@]} $p )
        do_remove=1

        neededby=`awk '
          /^@ / {
            pn = $2
          }
          $0 ~ "^requires: .*"query {
            print pn
          }
          ' query="$p" setup.ini`
        
        for npkg in $neededby; do
          CURRENT=( ${CURRENT[@]} $npkg )
        done

      done
    done

    echo; echo

    [ $do_remove = 1 ] || { echo Nothing to remove, exiting; exit; }

    echo Following packages will be removed:
    echo ${REMOVE[@]}
    ask_user "Do you wish to continue?" || exit
    
    for pkg in ${REMOVE[@]}; do

      echo Removing: $pkg

      if [ -e "/etc/preremove/$pkg.sh" ]; then
        "/etc/preremove/$pkg.sh"
      fi
      
      gzip -cd "/etc/setup/$pkg.lst.gz" | awk '/[^\/]$/ {print "rm -f \"/" $0 "\""}' | sh
      awk > /tmp/awk.$$ -v pkg="$pkg" '{if (pkg != $1) print $0}' /etc/setup/installed.db
      rm -f "/etc/postinstall/$pkg.sh.done" "/etc/preremove/$pkg.sh" "/etc/setup/$pkg.lst.gz"
      mv /etc/setup/installed.db /etc/setup/installed.db-save
      mv /tmp/awk.$$ /etc/setup/installed.db
    
    done
    echo Done.
    exit
}

function invoke_subcommand ()
{
    local SUBCOMMAND="${@:1:1}"
    local ARGS=( "${@:2}" )
    local ACTION="cyg-pall-${SUBCOMMAND:-help}"
    if type "$ACTION" >& /dev/null; then
      "$ACTION" "${ARGS[@]}"
    else
      error "unknown subcommand: $SUBCOMMAND"
      exit 1
    fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
